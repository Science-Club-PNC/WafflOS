#include <stddef.h>
#include <memory.h>

#include "terminal.h"
#include "../malloc.h"

size_t line_array_length;
struct line_descriptor* line_array = NULL;

size_t last_line = 0;

int init_line_array(size_t length)
{
    destroy_line_array();

    line_array = calloc(length, sizeof(struct line_descriptor));
    if (line_array == NULL) return 1;

    line_array_length = length;
    last_line = 0;

    return 0;
}

void destroy_line_array()
{
    if (line_array == NULL) return;

    for (size_t i = 0; i < line_array_length; i++) {
        destroy_line(i);
    }

    free(line_array);

    line_array = NULL;
    last_line = 0;
    line_array_length = 0;
}

int resize_line_array(size_t length)
{
    if (line_array == NULL) return 1;

    struct line_descriptor* new_line_array = realloc(line_array, length*sizeof(struct line_descriptor));
    if (new_line_array == NULL) return 1;

    line_array = new_line_array;
    line_array_length = length;

    if (last_line >= line_array_length) {
        last_line = line_array_length - 1;
    }

    return 0;
}

struct line_descriptor* get_line(size_t line)
{
    if (line_array == NULL || line_array_length == 0 || line > last_line) return NULL;

    return &line_array[line];
}

int init_line(size_t line, size_t length)
{
    destroy_line(line);

    line_array[line].string = malloc(length * sizeof(char));
    if (line_array[line].string == NULL) return 1;

    line_array[line].allocated_length = length;
    line_array[line].saving_length = 0;
    line_array[line].display_length = 0;

    return 0;
}

int create_line(size_t line, size_t length)
{
    struct line_descriptor* line_desc = get_line(line);

    if (line_desc
}

void destroy_line(size_t line)
{
    if (line_array[line].string == NULL) return;

    free(line_array[line].string);
    line_array[line].string = NULL;

    line_array[line].allocated_length = 0;
    line_array[line].saving_length = 0;
    line_array[line].display_length = 0;
}

int resize_line(size_t line, size_t length)
{
    struct line_descriptor* line_desc = get_line(line);
    if (line_array[line].string == NULL) return init_line(line, length);

    char* new_string = realloc(line_array[line].string, length * sizeof(char));
    if (new_string == NULL) {debug_string[4] = 'r'; return 1;}

    line_array[line].string = new_string;
    line_array[line].allocated_length = length;
    return 0;
}

/*int init_line_array(size_t length)
{
    destroy_line_array();

    line_array = calloc(length, sizeof(struct line_descriptor));
    if (line_array == NULL) return 1;

    line_array_length = length;
    last_line = 0;

    return 0;
}

void destroy_line_array()
{
    if (line_array == NULL) return;

    for (size_t i = 0; i < line_array_length; i++) {
        destroy_line(i);
    }

    free(line_array);
    line_array = NULL;
}

int resize_line_array(size_t length)
{
    if (line_array == NULL) return 1;

    struct line_descriptor* new_line_array = realloc(line_array, length*sizeof(struct line_descriptor));
    if (new_line_array == NULL) return 1;

    line_array = new_line_array;
    line_array_length = length;

    if (last_line >= line_array_length) {
        last_line = line_array_length - 1;
    }

    return 0;
}

void clear_line_array()
{
    for (size_t i = 0; i <= last_line; i++) {
        destroy_line(i);
    }

    last_line = 0;
}

struct line_descriptor* get_line(size_t line)
{
    if (line_array == NULL || line_array_length == 0 || line > last_line) return NULL;

    return &line_array[line];
}

int init_line(size_t line, size_t length)
{
    destroy_line(line);

    line_array[line].string = malloc(length * sizeof(char));
    if (line_array[line].string == NULL) {debug_string[4] = 'i'; return 1;}

    line_array[line].allocated_length = length;
    line_array[line].saving_length = 0;
    line_array[line].display_length = 0;

    return 0;
}

void destroy_line(size_t line)
{
    if (line_array[line].string == NULL) return;

    free(line_array[line].string);
    line_array[line].string = NULL;
    line_array[line].allocated_length = 0;
    line_array[line].saving_length = 0;
    line_array[line].display_length = 0;
}

int resize_line(size_t line, size_t length)
{
    struct line_descriptor* line_desc = get_line(line);
    if (line_array[line].string == NULL) return init_line(line, length);

    char* new_string = realloc(line_array[line].string, length * sizeof(char));
    if (new_string == NULL) {debug_string[4] = 'r'; return 1;}

    line_array[line].string = new_string;
    line_array[line].allocated_length = length;
    return 0;
}

int insert_line(size_t line, size_t length)
{
    if(line > last_line) {
        if (line >= line_array_length) {
            if (resize_line_array(line + 1)) return 1;
        }

        last_line = line;
    } else {
        if (last_line == line_array_length - 1) {
            if (resize_line_array(line_array_length + 1)) return 1;
        }

        memmove(&line_array[line], &line_array[line + 1], (last_line - line + 1)*sizeof(struct line_descriptor));
        line_array[line].string = NULL;
        last_line++;
    }

    init_line(line, length);

    return 0;
}

void remove_line(size_t line) {
    destroy_line(line);

    if (line == last_line) {
        if (last_line > 0) {
            last_line--;
        }
    } else {
        memmove(&line_array[line + 1], &line_array[line], (last_line - line)*sizeof(struct line_descriptor));
        last_line--;
    }
}*/
